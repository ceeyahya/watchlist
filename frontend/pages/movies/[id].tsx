import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import Head from 'next/head';
import Image from 'next/image';
import { NextPage, GetServerSidePropsContext } from 'next';
import { RiDeleteBin2Fill, RiLoader4Fill } from 'react-icons/ri';
import { useUser } from '@auth0/nextjs-auth0';

import { fetchMovie } from 'lib/movies';
import { Notification } from 'components/Misc/Notification';
import { Movie } from 'types/Movie';
import { Router, useRouter } from 'next/router';

const Movie: NextPage<{ movie: Movie }> = ({ movie }) => {
	const router = useRouter();
	const [show, setShow] = useState(false);
	const { user } = useUser();

	const handleChangeStatus = async (changedStatus: boolean) => {
		await axios.put(`https://watchlist-api.onrender.com/movie/${movie.id}`, {
			title: movie.title,
			releaseYear: movie.releaseYear,
			synopsis: movie.synopsis,
			status: changedStatus,
			review: movie.review,
			cover: movie.cover,
		});
		setShow(true);
		return router.push('/movies');
	};

	const handleDelete = async () => {
		await axios.delete(`https://watchlist-api.onrender.com/movie/${movie.id}`);
		return router.push('/movies');
	};

	return (
		<div>
			<div className='py-4 sm:py-20 max-w-3xl mx-auto space-y-8'>
				<Head>
					<title>{movie.title} - Watchlist</title>
					<meta name='description' content='Generated by create next app' />
					<link rel='icon' href='/favicon.ico' />
				</Head>
				<div>
					{user ? (
						<div className='py-2 flex items-center justify-end space-x-4'>
							<div>
								{movie.status ? (
									<button
										onClick={() => handleChangeStatus(false)}
										className='bg-gray-100 text-sm font-medium hover:bg-gray-200 hover:shadow-lg shadow-md shadow-gray-200 px-4 py-2 rounded-md transition duration-300'>
										Mark as in Watchlist
									</button>
								) : (
									<button
										onClick={() => handleChangeStatus(true)}
										className='bg-gray-100 text-sm font-medium hover:bg-gray-200 hover:shadow-lg shadow-md shadow-gray-200 px-4 py-2 rounded-md transition duration-300'>
										Mark as Seen
									</button>
								)}
							</div>
							<div>
								<button
									onClick={() => handleDelete()}
									className='group px-2 py-2 bg-red-100 group-hover:shadow-lg shadow-sm shadow-gray-200 rounded-md transition duration-300'>
									<RiDeleteBin2Fill className='h-6 w-6 text-red-600 group-hover:text-red-800 transition duration-300' />
								</button>
							</div>
						</div>
					) : null}
				</div>
				<div className='flex flex-col md:flex-col lg:flex-row items-start space-y-2 md:space-y-0 md:space-x-8 mx-auto'>
					<Image
						loading='eager'
						blurDataURL={movie?.cover ? movie.cover : '/covers.png'}
						objectFit='cover'
						placeholder='blur'
						layout='intrinsic'
						className='rounded-md shadow-md shadow-gray-200'
						width={217}
						height={314}
						src={movie?.cover || '/covers.png'}
						alt={`${movie?.title} Cover`}
					/>
					<div className='flex flex-col space-y-1 md:space-y-2'>
						<div>
							<h1 className='text-2xl font-bold'>{movie.title}</h1>
							<span
								className={`${
									movie.status ? 'text-green-600' : 'text-orange-600'
								}`}>
								{movie?.status ? 'Seen' : 'Watchlist'}
							</span>
						</div>
						<p className='text-gray-500'>
							<span className='text-black font-medium'>
								{movie.director.fullname}
							</span>{' '}
							({movie.releaseYear || 'No release year as of now'})
						</p>
						<p className='max-w-xl text-sm lg:text-base text-gray-500'>
							{movie.synopsis || 'No synopsis as of now'}
						</p>
					</div>
				</div>
				<div>
					<h2 className='py-2 text-2xl font-bold'>Review</h2>
					<p className='text-gray-500'>{movie.review || 'No review yet.'}</p>
				</div>
			</div>
			<Notification
				show={show}
				setShow={setShow}
				title='Status Changed Successfully'
				text={`The status of ${movie?.title} has been changed`}
			/>
		</div>
	);
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
	const res = await fetchMovie(context.query.id);

	return {
		props: { movie: res },
	};
}

export default Movie;
