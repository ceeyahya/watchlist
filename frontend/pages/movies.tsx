import { useState } from 'react';
import Link from 'next/link';
import Head from 'next/head';
import Image from 'next/image';
import type { NextPage } from 'next';
import { useUser } from '@auth0/nextjs-auth0';
import axios from 'axios';
import { dehydrate, QueryClient, useQuery } from '@tanstack/react-query';
import { RiDeleteBin2Fill } from 'react-icons/ri';

import { fetchMovies } from 'lib/movies';
import { Notification } from 'components/Misc/Notification';
import { Movie } from 'types/Movie';

const Movies: NextPage = () => {
	const { isLoading, data } = useQuery(['movies'], fetchMovies);
	const [show, setShow] = useState(false);
	const { user } = useUser();

	const handleDelete = async (id: number) => {
		await axios.delete(`http://localhost:3000/movie/${id}`);
		setShow(true);
	};

	if (isLoading) {
		return (
			<div className='fixed inset-0 h-screen flex flex-col justify-center items-center'>
				<h1 className='text-4xl font-bold'>Loading Data ...</h1>
			</div>
		);
	}

	return (
		<div>
			<Head>
				<title>Movies - Watchlist</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<main>
				<h1 className='text-2xl font-bold'>Movies</h1>
				<div className='py-8 flex flex-col items-center sm:grid md:grid-cols-3 lg:grid-cols-4 gap-y-6 sm:gap-x-4'>
					{data?.map((movie: Movie) => (
						<Link key={movie?.id} href={`/movies/${movie.id}`}>
							<a className='group '>
								<div className='space-y-4'>
									<Image
										loading='eager'
										blurDataURL={movie?.cover ? movie.cover : '/covers.png'}
										objectFit='cover'
										placeholder='blur'
										layout='responsive'
										className='group-hover:hover:scale-105 group-hover:rounded-md shadow-md shadow-gray-200 rounded-md transition duration-300'
										width={217}
										height={314}
										src={movie?.cover || '/covers.png'}
										alt={`${movie?.title} Cover`}
									/>
									<div className='flex items-center space-x-2 lg:space-x-4'>
										<div>
											<h2
												className='group-hover:translate-x-1 text-lg font-bold w-44 truncate transition duration-300'
												aria-label={movie?.title}>
												{movie?.title}
											</h2>
											<p className='group-hover:translate-x-1 text-gray-400 text-sm transition duration-300'>
												<span
													className={`${
														movie.status ? 'text-green-600' : 'text-orange-600'
													}`}>
													{movie?.status ? 'Seen' : 'Watchlist'}
												</span>{' '}
												- {movie?.releaseYear}
											</p>
											<p className='group-hover:translate-x-1 text-gray-400 transition duration-300'></p>
										</div>
										{user ? (
											<button
												onClick={() => handleDelete(movie?.id)}
												className='text-red-600 hover:text-red-800 transition duration-300'>
												<RiDeleteBin2Fill className='h-5 w-5' />
											</button>
										) : null}
									</div>
								</div>
							</a>
						</Link>
					))}
				</div>
			</main>
			<Notification
				show={show}
				setShow={setShow}
				title='Successfully Deleted'
				text='a record has been deleted from the database'
			/>
		</div>
	);
};

export async function getStaticProps() {
	const queryClient = new QueryClient();
	await queryClient.prefetchQuery(['movies'], fetchMovies);

	return {
		props: { dehydratedState: dehydrate(queryClient) },
	};
}

export default Movies;
